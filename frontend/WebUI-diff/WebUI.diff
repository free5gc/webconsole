diff --color -rc webconsole-orig/backend/WebUI/api_webui.go webconsole/backend/WebUI/api_webui.go
*** webconsole-orig/backend/WebUI/api_webui.go	2023-07-25 22:18:08.223552890 -0700
--- webconsole/backend/WebUI/api_webui.go	2023-07-30 07:58:38.921591779 -0700
***************
*** 91,97 ****
  	c.Writer.Header().Set(
  		"Access-Control-Allow-Headers",
  		"Content-Type, Content-Length, Accept-Encoding, "+
! 			"X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With",
  	)
  	c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, PATCH, DELETE")
  }
--- 91,97 ----
  	c.Writer.Header().Set(
  		"Access-Control-Allow-Headers",
  		"Content-Type, Content-Length, Accept-Encoding, "+
! 			"X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With, Token",
  	)
  	c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, PATCH, DELETE")
  }
***************
*** 422,427 ****
--- 422,429 ----
  func Login(c *gin.Context) {
  	setCorsHeader(c)
  
+ 	EnsureAdminTenant()
+ 
  	login := LoginRequest{}
  	err := json.NewDecoder(c.Request.Body).Decode(&login)
  	if err != nil {
***************
*** 504,510 ****
  // Check of admin user. This should be done with proper JWT token.
  func CheckAuth(c *gin.Context) bool {
  	tokenStr := c.GetHeader("Token")
! 	if tokenStr == "admin" {
  		return true
  	} else {
  		return false
--- 506,516 ----
  // Check of admin user. This should be done with proper JWT token.
  func CheckAuth(c *gin.Context) bool {
  	tokenStr := c.GetHeader("Token")
! 	claims, err := ParseJWT(tokenStr)
! 	if err != nil {
! 		return false
! 	}
! 	if claims["tenantId"].(string) == DEFAULT_ADMIN_TENANT {
  		return true
  	} else {
  		return false
***************
*** 931,943 ****
  
  	logger.ProcLog.Infoln("Get All Subscribers List")
  
! 	tokenStr := c.GetHeader("Token")
! 
! 	var claims jwt.MapClaims = nil
! 	var err error = nil
! 	if tokenStr != "admin" {
! 		claims, err = ParseJWT(tokenStr)
! 	}
  	if err != nil {
  		logger.ProcLog.Errorln(err.Error())
  		c.JSON(http.StatusBadRequest, gin.H{
--- 937,943 ----
  
  	logger.ProcLog.Infoln("Get All Subscribers List")
  
! 	userTenantId, err := GetTenantId(c)
  	if err != nil {
  		logger.ProcLog.Errorln(err.Error())
  		c.JSON(http.StatusBadRequest, gin.H{
***************
*** 975,981 ****
  			return
  		}
  
! 		if tokenStr == "admin" || tenantId == claims["tenantId"].(string) {
  			tmp := SubsListIE{
  				PlmnID: servingPlmnId.(string),
  				UeId:   ueId.(string),
--- 975,981 ----
  			return
  		}
  
! 		if userTenantId == DEFAULT_ADMIN_TENANT || userTenantId == tenantId {
  			tmp := SubsListIE{
  				PlmnID: servingPlmnId.(string),
  				UeId:   ueId.(string),
***************
*** 1610,1616 ****
  			return
  		}
  
! 		if tenantId == "" {
  			sendResponseToClient(c, resp)
  		} else {
  			sendResponseToClientFilterTenant(c, resp, tenantId)
--- 1610,1616 ----
  			return
  		}
  
! 		if tenantId == DEFAULT_ADMIN_TENANT {
  			sendResponseToClient(c, resp)
  		} else {
  			sendResponseToClientFilterTenant(c, resp, tenantId)
***************
*** 1664,1666 ****
--- 1664,1741 ----
  		})
  	}
  }
+ 
+ func ChangePasswordInfo(c *gin.Context) {
+ 	setCorsHeader(c)
+ 
+ 	// Need to get tenantId.
+ 	tenantId, err := GetTenantId(c)
+ 	if err != nil {
+ 		logger.ProcLog.Errorln(err.Error())
+ 		c.JSON(http.StatusBadRequest, gin.H{})
+ 		return
+ 	}
+ 
+ 	var newUserData User
+ 	if err := c.ShouldBindJSON(&newUserData); err != nil {
+ 		logger.ProcLog.Errorln(err.Error())
+ 		c.JSON(http.StatusBadRequest, gin.H{})
+ 		return
+ 	}
+ 
+ 	filterEmailOnly := bson.M{"tenantId": tenantId, "email": newUserData.Email}
+ 	userDataInterface, err := mongoapi.RestfulAPIGetOne(userDataColl, filterEmailOnly)
+ 	if err != nil {
+ 		logger.ProcLog.Errorf("ChangePassword err: %+v", err)
+ 	}
+ 	if len(userDataInterface) == 0 {
+ 		c.JSON(http.StatusNotFound, bson.M{})
+ 		return
+ 	}
+ 
+ 	var userData User
+ 	json.Unmarshal(mapToByte(userDataInterface), &userData)
+ 
+ 	if newUserData.EncryptedPassword != "" {
+ 		hash, _ := bcrypt.GenerateFromPassword([]byte(newUserData.EncryptedPassword), 12)
+ 		userData.EncryptedPassword = string(hash)
+ 	}
+ 
+ 	userBsonM := toBsonM(userData)
+ 	if _, err := mongoapi.RestfulAPIPost(userDataColl, filterEmailOnly, userBsonM); err != nil {
+ 		logger.ProcLog.Errorf("PutUserByID err: %+v", err)
+ 	}
+ 
+ 	c.JSON(http.StatusOK, userData)
+ }
+ 
+ const DEFAULT_ADMIN_EMAIL = "admin"
+ const DEFAULT_ADMIN_TENANT = "AdminTenant"
+ const DEFAULT_ADMIN_USER_PASSWORD = "free5gc"
+ 
+ // EnsureAdminTenant creates default admin user tenant when it does not exist.
+ func EnsureAdminTenant() {
+ 	adminTenantOnly := bson.M{"tenantId": DEFAULT_ADMIN_TENANT}
+ 	userDataInterface, err := mongoapi.RestfulAPIGetOne(userDataColl, adminTenantOnly)
+ 	if err == nil && len(userDataInterface) != 0 {
+ 		// Admin user already created.
+ 		return
+ 	}
+ 
+ 	var userData User
+ 	userData.Email = DEFAULT_ADMIN_EMAIL
+ 	userData.TenantId = DEFAULT_ADMIN_TENANT
+ 	hash, _ := bcrypt.GenerateFromPassword([]byte(DEFAULT_ADMIN_USER_PASSWORD), 12)
+ 	userData.EncryptedPassword = string(hash)
+ 
+ 	userBsonM := toBsonM(userData)
+ 	if _, err := mongoapi.RestfulAPIPost(userDataColl, adminTenantOnly, userBsonM); err != nil {
+ 		logger.ProcLog.Errorf("PutUserByID err: %+v", err)
+ 	}
+ }
+ 
+ func OptionsSubscribers(c *gin.Context) {
+ 	setCorsHeader(c)
+ 
+ 	c.JSON(http.StatusNoContent, gin.H{})
+ }
diff --color -rc webconsole-orig/backend/WebUI/routers.go webconsole/backend/WebUI/routers.go
*** webconsole-orig/backend/WebUI/routers.go	2023-07-25 22:18:08.223552890 -0700
--- webconsole/backend/WebUI/routers.go	2023-07-30 07:58:38.921591779 -0700
***************
*** 46,51 ****
--- 46,53 ----
  			group.DELETE(route.Pattern, route.HandlerFunc)
  		case http.MethodPatch:
  			group.PATCH(route.Pattern, route.HandlerFunc)
+ 		case http.MethodOptions:
+ 			group.OPTIONS(route.Pattern, route.HandlerFunc)
  		}
  	}
  
***************
*** 152,157 ****
--- 154,166 ----
  	},
  
  	{
+ 		"OptionsSubscribers",
+ 		http.MethodOptions,
+ 		"/subscriber",
+ 		OptionsSubscribers,
+ 	},
+ 
+ 	{
  		"GetSubscriberByID",
  		http.MethodGet,
  		"/subscriber/:ueId/:servingPlmnId",
***************
*** 213,216 ****
--- 222,232 ----
  		"/ue-pdu-session-info/:smContextRef",
  		GetUEPDUSessionInfo,
  	},
+ 
+ 	{
+ 		"Change Password",
+ 		http.MethodPost,
+ 		"/change-password",
+ 		ChangePasswordInfo,
+ 	},
  }
